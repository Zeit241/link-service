// Commands
// prisma generate
// npx prisma db push

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  expires      DateTime @db.Timestamp
  sessionToken String   @db.String
  userId       String
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  username      String?   @unique
  name          String?   @db.String
  password      String?   @db.String
  email         String?   @unique
  emailVerified Boolean?
  image         String?   @db.String
  status        Status    @default(ACTIVE)
  verified      Boolean   @default(false)
  role          Role      @default(USER)
  createdAt     DateTime  @default(now()) @db.Date
  updatedAt     DateTime  @updatedAt
  records       Record[]
  accounts      Account[]
}

model Account {
  id                       String  @id @default(auto()) @map("_id") @db.ObjectId
  userId                   String  @db.ObjectId
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.String
  access_token             String? @db.String
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.String
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Record {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  url            String      @unique
  name           String
  enabled        Boolean     @default(true)
  adult          Boolean     @default(false)
  description    String?
  profilePicture String      @default("")
  pictureKey     String?     @db.String
  preferences    Prefences
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String      @db.ObjectId
  createdAt      DateTime    @default(now()) @db.Date
  updatedAt      DateTime    @updatedAt
  Link           Link[]
  Statistic      Statistic[]
  Warns          Warns[]
}

model Link {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  order       Int          @default(0)
  type        LinkType     @default(URL)
  error       Boolean      @default(false)
  url         String?
  document    Document?
  video       Video?
  contact     Contact?
  name        String
  enabled     Boolean      @default(true)
  customImage CustomImage?
  animated    Boolean?     @default(false)
  createdAt   DateTime     @default(now()) @db.Date
  updatedAt   DateTime     @updatedAt
  record      Record       @relation(fields: [recordId], references: [id], onDelete: Cascade)
  recordId    String       @db.ObjectId
  Statistic   Statistic[]
}

model Statistic {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  ip        String?
  country   String?
  from      String
  shared    ShareLink?
  platform  String
  link      Link       @relation(fields: [linkId], references: [id], onDelete: Cascade)
  linkId    String     @db.ObjectId
  createdAt DateTime   @default(now()) @db.Date
  record    Record     @relation(fields: [recordId], references: [id], onDelete: Cascade)
  recordId  String     @db.ObjectId
}

model Warns {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  checked   Boolean  @default(false)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now()) @db.Date
  record    Record   @relation(fields: [recordId], references: [id], onDelete: Cascade)
  recordId  String   @db.ObjectId
}

type Document {
  description String @default("")
  url         String
}

type Video {
  showOnPage Boolean
  url        String
}

type Contact {
  firstname       String?
  lastname        String?
  organization    String?
  position        String?
  email_1         ContactEmail?
  email_2         ContactEmail?
  phone_1         ContactPhone?
  phone_2         ContactPhone?
  adress          String?
  adress_optional String?
  city            String?
  country         String?
  zip             String?
  state           String?
  description     String?
}

type ContactEmail {
  email String
  type  EmailType @default(OTHER)
}

type ContactPhone {
  phone String
  type  PhoneType @default(OTHER)
}

type Prefences {
  backgroundGradient Boolean @default(false)
  backgroundColor    String  @default("#fff")
}

type CustomImage {
  enabled Boolean
  image   String?
}

type ShareLink {
  shared   Boolean @default(false)
  sharedTo ShareTo
}

enum EmailType {
  PERSONAL
  WORK
  OTHER
}

enum PhoneType {
  MOBILE
  HOME
  WORK
  OTHER
}

enum ShareTo {
  EMAIL
  FACEBOOK
  TWITTER
  OTHER
}

enum LinkType {
  URL
  HEADER
  EMAIL
  DOCUMENT
  VIDEO
  CONTACT
}

enum LinkWarnType {
  CODE
  AGE
  ADULT
}

enum Role {
  USER
  ADMIN
}

enum Status {
  ACTIVE
  FROZEN
  BANNED
}
